{"version":3,"sources":["components/Images.js","components/Gettingsize.js","App.js","serviceWorker.js","index.js"],"names":["Images","path","className","alt","src","Gettingsize","handlenameValue","handlewidth","handleheight","handleclick","type","name","onChange","placeholder","onClick","App","event","console","log","setState","nameValue","target","value","widthValue","heightValue","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAmBeA,G,YAfA,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACb,MAAa,KAATA,EAEI,wBAAIC,UAAU,MAAd,kBAKA,yBAAKA,UAAU,MACX,yBAAKC,IAAI,MAAMC,IAAKH,OCoBrBI,G,MA9BK,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,gBAAgBC,EAA0C,EAA1CA,YAAYC,EAA8B,EAA9BA,aAAaC,EAAiB,EAAjBA,YAC7D,OACE,yBAAKP,UAAU,QACb,yBAAKA,UAAU,WACb,8BACE,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,iCAEF,yBAAKA,UAAU,QACb,qCACA,2BAAOQ,KAAK,OAAOC,KAAK,OAAOC,SAAUN,KAE3C,yBAAKJ,UAAU,QACb,qCACA,yBAAKA,UAAU,aACb,2BAAOQ,KAAK,SAASC,KAAK,OAAOE,YAAY,QAAQD,SAAUL,IAC/D,2BAAOG,KAAK,SAASC,KAAK,OAAOE,YAAY,SAASD,SAAUJ,MAGpE,yBAAKN,UAAU,aACb,4BAAQQ,KAAK,SAASI,QAASL,GAA/B,eC8BGM,E,kDAhDb,aAAe,IAAD,8BACZ,gBAQFT,gBAAkB,SAACU,GACjBC,QAAQC,IAAI,mBACZ,EAAKC,SAAS,CAACC,UAAWJ,EAAMK,OAAOC,SAX3B,EAadf,YAAc,SAACS,GACbC,QAAQC,IAAI,eACZ,EAAKC,SAAS,CAACI,WAAYP,EAAMK,OAAOC,SAf5B,EAiBdd,aAAe,SAACQ,GACdC,QAAQC,IAAI,gBACZ,EAAKC,SAAS,CAACK,YAAaR,EAAMK,OAAOC,SAnB7B,EAqBdb,YAAc,SAACO,GACbC,QAAQC,IAAI,aADW,MAEQ,EAAKO,MAA7BL,EAFgB,EAEhBA,UAAUG,EAFM,EAENA,WACjB,GAAkB,KAAdH,GAAmC,KAAfG,EAItB,OAAO,EAAKJ,SAAS,CAAClB,KAAI,0CAAsCsB,EAAtC,YAAoDH,KAH9E,EAAKD,SAAS,CAAClB,KAAO,MAvBxB,EAAKwB,MAAQ,CACXL,UAAY,GACZG,WAAY,GACZC,YAAc,GACdvB,KAAO,IANG,E,qDAkCZ,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEI,gBAAiBoB,KAAKpB,gBACtBC,YAAamB,KAAKnB,YAClBC,aAAgBkB,KAAKlB,aACrBC,YAAaiB,KAAKjB,cAEpB,kBAAC,EAAD,CAAQR,KAAQyB,KAAKD,MAAMxB,Y,GA3CjB0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.1a67ad40.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\nimport './Images.css';\r\n\r\nconst Images = ({path}) => {\r\n    if (path === ''){\r\n        return (\r\n            <h1 className=\"tc\">ENTER PROPERTY</h1>\r\n        )\r\n    }    \r\n    else {\r\n        return (\r\n            <div className='tc'>\r\n                <img alt='dos' src={path} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Images;\r\n","import React from 'react';\r\nimport './Gettingsize.css';\r\n\r\nconst Gettingsize = ({handlenameValue,handlewidth,handleheight,handleclick}) => {\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"testbox\">\r\n        <form>\r\n          <div className=\"banner\">\r\n            <h1 className=\"fh1\">Write Name And Size Of Image</h1>\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Name :</p>\r\n            <input type=\"text\" name=\"name\" onChange={handlenameValue}/>\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Size :</p>\r\n            <div className=\"name-item\">\r\n              <input type=\"number\" name=\"name\" placeholder=\"Width\" onChange={handlewidth}/>\r\n              <input type=\"number\" name=\"name\" placeholder=\"Height\" onChange={handleheight}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"btn-block\">\r\n            <button type=\"button\" onClick={handleclick}>Apply</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Gettingsize;","import React, {Component} from 'react';\r\nimport Images from './components/Images'\r\nimport Gettingsize from './components/Gettingsize';\r\n\r\nclass App extends Component {\r\n  constructor (){\r\n    super()\r\n    this.state = {\r\n      nameValue : '',\r\n      widthValue :'',\r\n      heightValue : '',\r\n      path : ''\r\n    }\r\n  }\r\n  handlenameValue = (event) => {\r\n    console.log(\"handlenamevalue\");\r\n    this.setState({nameValue: event.target.value});\r\n  }\r\n  handlewidth = (event) => {\r\n    console.log(\"handlewidth\");\r\n    this.setState({widthValue: event.target.value});\r\n  }\r\n  handleheight = (event) => {\r\n    console.log(\"handleheight\");\r\n    this.setState({heightValue: event.target.value})\r\n  }\r\n  handleclick = (event) => {\r\n    console.log(\"handclick\")\r\n    const {nameValue,widthValue} = this.state;\r\n    if (nameValue === '' || widthValue === ''){\r\n      this.setState({path : ''})\r\n    }\r\n    else {\r\n      return this.setState({path : `https://api.adorable.io/avatars/${widthValue}/${nameValue}`})\r\n    }\r\n  }\r\n  render (){\r\n    \r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Gettingsize \r\n          handlenameValue={this.handlenameValue} \r\n          handlewidth={this.handlewidth} \r\n          handleheight = {this.handleheight} \r\n          handleclick={this.handleclick}\r\n        />\r\n        <Images path = {this.state.path}/>\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}